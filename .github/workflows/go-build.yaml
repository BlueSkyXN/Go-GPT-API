name: Go Building

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-Go-GPT-API:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            GOOS: linux
            GOARCH: amd64
            ext: ''
            build_type: regular
          - os: ubuntu-22.04
            GOOS: linux
            GOARCH: amd64
            ext: ''
            build_type: static
          - os: ubuntu-20.04
            GOOS: linux
            GOARCH: amd64
            ext: ''
            build_type: regular
          - os: ubuntu-20.04
            GOOS: linux
            GOARCH: amd64
            ext: ''
            build_type: static
          - os: windows-2019
            GOOS: windows
            GOARCH: amd64
            ext: '.exe'
            build_type: regular
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'

      - name: Set commit message
        id: set_commit
        run: |
          commit_message=$(git log --format=%B -1)
          echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
        shell: bash

      - name: Get GLIBC version
        run: |
          ldd --version | head -n 1
        shell: bash

      - name: Get dependencies
        run: |
          go mod download
          go mod tidy

      - name: Set build type suffix
        id: build_type_suffix
        shell: bash
        run: |
          if [[ "${{ matrix.build_type }}" == "regular" ]]; then
            echo "suffix=''" >> $GITHUB_ENV
          else
            echo "suffix='_static'" >> $GITHUB_ENV
          fi

      - name: Build executable
        shell: bash
        run: |
          echo "GOOS=${{ matrix.GOOS }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.GOARCH }}" >> $GITHUB_ENV
          if [[ "${{ matrix.os }}" != "windows-2019" ]]; then
            if [[ "${{ matrix.build_type }}" == "regular" ]]; then
              go build -o dist/${{ matrix.os }}/GGA${{ env.suffix }} ./main.go
            else
              CGO_ENABLED=0 GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }} go build -a -ldflags '-extldflags "-static"' -o dist/${{ matrix.os }}/GGA${{ env.suffix }} ./main.go
            fi
          else
            go build -o dist/${{ matrix.os }}/GGA${{ env.suffix }} ./main.go
          fi


      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_Go-GPT-API_${{ matrix.os }}_${{ matrix.build_type }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/${{ matrix.os }}/GGA${{ env.suffix }}${{ matrix.ext }}

      - name: Upload all Artifacts in the OS-specific directory
        uses: actions/upload-artifact@v3
        with:
          name: All_Artifacts_${{ matrix.os }}_${{ matrix.build_type }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/${{ matrix.os }}/
